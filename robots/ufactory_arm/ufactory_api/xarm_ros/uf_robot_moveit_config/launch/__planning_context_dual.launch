<launch>
  <!-- By default we do not overwrite the URDF. Change the following to true to change the default behavior -->
  <arg name="load_robot_description" default="false"/>
  <arg name="limited" default="true"/>
  <arg name="model1300" default="false" />
  <arg name="add_realsense_d435i" default="false" />
  <arg name="add_d435i_links" default="false" />
  <arg name="attach_to" default="world" />
  <arg name="attach_xyz" default="'0 0 0'" />
  <arg name="attach_rpy" default="'0 0 0'" />
  <arg name="robot_sn" default="" />
  <arg name="dof" default="7" />
  <arg name="robot_type" default="xarm" />
  <arg name="robot_name" default="xarm7" />
  <arg name="velocity_control" default="false"/>
  <arg name="kinematics_suffix_1" default=""/>
  <arg name="kinematics_suffix_2" default=""/>

  <!-- The name of the parameter under which the URDF is loaded -->
  <arg name="robot_description" default="robot_description"/>
  
  <arg name="add_gripper" default="false"/>
  <arg name="add_vacuum_gripper" default="false"/>
  <arg name="add_other_geometry" default="false"/>
  <arg name="geometry_type" default="box"/>
  <arg name="geometry_mass" default="0.1"/>
  <arg name="geometry_height" default="0.1"/>
  <arg name="geometry_radius" default="0.1"/>
  <arg name="geometry_length" default="0.1"/>
  <arg name="geometry_width" default="0.1"/>
  <arg name="geometry_mesh_filename" default=""/>
  <arg name="geometry_mesh_origin_xyz" default="'0 0 0'"/>
  <arg name="geometry_mesh_origin_rpy" default="'0 0 0'"/>
  <arg name="geometry_mesh_tcp_xyz" default="'0 0 0'"/>
  <arg name="geometry_mesh_tcp_rpy" default="'0 0 0'"/>

  <!-- Load universal robot description format (URDF) -->
  <param if="$(arg load_robot_description)" name="$(arg robot_description)" 
    command="xacro --inorder  '$(find xarm_description)/urdf/dual_xarm_device.urdf.xacro' 
      dof_1:=$(arg dof)
      dof_2:=$(arg dof)
      robot_type_1:=$(arg robot_type) 
      robot_type_2:=$(arg robot_type) 
      robot_sn_1:=$(arg robot_sn)
      robot_sn_2:=$(arg robot_sn)
      limited:=$(arg limited)      
      kinematics_suffix_1:=$(arg kinematics_suffix_1)      
      kinematics_suffix_2:=$(arg kinematics_suffix_2)      
      model1300_1:=$(arg model1300)
      model1300_2:=$(arg model1300)
      velocity_control:=$(arg velocity_control)
      add_realsense_d435i_1:=$(arg add_realsense_d435i)
      add_realsense_d435i_2:=$(arg add_realsense_d435i)
      add_d435i_links_1:=$(arg add_d435i_links)
      add_d435i_links_2:=$(arg add_d435i_links)
      add_gripper_1:=$(arg add_gripper)
      add_gripper_2:=$(arg add_gripper)
      add_vacuum_gripper_1:=$(arg add_vacuum_gripper)
      add_vacuum_gripper_2:=$(arg add_vacuum_gripper)
      add_other_geometry_1:=$(arg add_other_geometry)
      add_other_geometry_2:=$(arg add_other_geometry)
      geometry_type_1:=$(arg geometry_type)
      geometry_type_2:=$(arg geometry_type)
      geometry_mass_1:=$(arg geometry_mass)
      geometry_mass_2:=$(arg geometry_mass)
      geometry_height_1:=$(arg geometry_height)
      geometry_height_2:=$(arg geometry_height)
      geometry_radius_1:=$(arg geometry_radius)
      geometry_radius_2:=$(arg geometry_radius)
      geometry_length_1:=$(arg geometry_length)
      geometry_length_2:=$(arg geometry_length)
      geometry_width_1:=$(arg geometry_width)
      geometry_width_2:=$(arg geometry_width)
      geometry_mesh_filename_1:=$(arg geometry_mesh_filename)
      geometry_mesh_filename_2:=$(arg geometry_mesh_filename)
      geometry_mesh_origin_xyz_1:=$(arg geometry_mesh_origin_xyz)
      geometry_mesh_origin_xyz_2:=$(arg geometry_mesh_origin_xyz)
      geometry_mesh_origin_rpy_1:=$(arg geometry_mesh_origin_rpy)
      geometry_mesh_origin_rpy_2:=$(arg geometry_mesh_origin_rpy)
      geometry_mesh_tcp_xyz_1:=$(arg geometry_mesh_tcp_xyz)
      geometry_mesh_tcp_xyz_2:=$(arg geometry_mesh_tcp_xyz)
      geometry_mesh_tcp_rpy_1:=$(arg geometry_mesh_tcp_rpy)
      geometry_mesh_tcp_rpy_2:=$(arg geometry_mesh_tcp_rpy)
    "/>

  <param if="$(arg load_robot_description)" name="$(arg robot_description)_semantic" 
    command="xacro --inorder  '$(find xarm_description)/srdf/dual_xarm.srdf.xacro'
      robot_type_1:=$(arg robot_type) 
      robot_type_2:=$(arg robot_type) 
      dof_1:=$(arg dof)
      dof_2:=$(arg dof)
      add_gripper_1:=$(arg add_gripper)
      add_gripper_2:=$(arg add_gripper)
      add_vacuum_gripper_1:=$(arg add_vacuum_gripper)
      add_vacuum_gripper_2:=$(arg add_vacuum_gripper)
      add_other_geometry_1:=$(arg add_other_geometry)
      add_other_geometry_2:=$(arg add_other_geometry)
  "/>

  <!-- Load updated joint limits (override information from URDF) -->
  <group ns="$(arg robot_description)_planning">
    <rosparam if="$(eval arg('add_gripper') and arg('robot_type') != 'lite')" command="load" file="$(find uf_robot_moveit_config)/config/$(arg robot_name)/joint_limits_with_gripper.yaml"/>
    <rosparam unless="$(eval arg('add_gripper') and arg('robot_type') != 'lite')" command="load" file="$(find uf_robot_moveit_config)/config/$(arg robot_name)/joint_limits.yaml"/>
  </group>

  <!-- Load default settings for kinematics; these settings are overridden by settings in a node's namespace -->
  <group ns="$(arg robot_description)_kinematics">
    <!-- <rosparam command="load" file="$(find uf_robot_moveit_config)/config/kinematics.yaml"/> -->
    <rosparam command="load" file="$(find uf_robot_moveit_config)/config/$(arg robot_name)/kinematics.yaml"/>
  </group>

</launch>
