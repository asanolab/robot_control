<launch>

  <!-- GDB Debug Option -->
  <arg name="debug" default="false" />
  <arg unless="$(arg debug)" name="launch_prefix" value="" />
  <arg     if="$(arg debug)" name="launch_prefix"
     value="gdb -x $(find uf_robot_moveit_config)/launch/gdb_settings.gdb --ex run --args" />

  <!-- Verbose Mode Option -->
  <arg name="info" default="$(arg debug)" />
  <arg unless="$(arg info)" name="command_args" value="" />
  <arg     if="$(arg info)" name="command_args" value="--debug" />

  <arg name="sim_gazebo" default="false"/>
  <arg name="add_gripper" default="false"/>
  <arg name="gripper_action" default="false"/>

  <arg name="sensors_3d" default="false" />
  <arg name="dof" default="7" />
  <arg name="robot_type" default="xarm" />
  <arg name="robot_name" default="xarm7" />

  <!-- move_group settings -->
  <arg name="allow_trajectory_execution" default="true"/>
  <arg name="fake_execution" default="false"/>
  <arg name="max_safe_path_cost" default="1"/>
  <arg name="jiggle_fraction" default="0.05" />
  <arg name="publish_monitored_planning_scene" default="true"/>

  <arg name="pipeline" default="ompl" />

  <!-- Planning Functionality -->
  <include ns="move_group" file="$(find uf_robot_moveit_config)/launch/__planning_pipeline.launch.xml">
    <arg name="pipeline" value="$(arg pipeline)" />
    <arg name="robot_name" value="$(arg robot_name)"/>
  </include>

  <arg name="gripper_controller" if="$(eval arg('robot_type') == 'lite')" value="false"/>
  <arg name="gripper_controller" unless="$(eval arg('robot_type') == 'lite')" value="$(arg add_gripper)"/>
  
  <!-- Trajectory Execution Functionality -->
  <include ns="move_group" file="$(find uf_robot_moveit_config)/launch/__trajectory_execution.launch.xml" if="$(arg allow_trajectory_execution)">
    <arg name="moveit_manage_controllers" value="true" />
    <arg name="moveit_controller_manager" value="fake" if="$(arg fake_execution)"/>
    <arg name="moveit_controller_manager" value="gazebo" if="$(eval not arg('fake_execution') and arg('sim_gazebo'))"/>
    <arg name="moveit_controller_manager" value="robot" if="$(eval not arg('fake_execution') and not arg('sim_gazebo'))"/>
    <!-- <arg name="add_gripper" value="$(arg add_gripper)"/>
    <arg name="gripper_action" value="$(arg gripper_action)"/>
    <arg name="robot_type" value="$(arg robot_type)"/>
    <arg name="robot_name" value="$(arg robot_name)"/> -->
    
    <!-- fake -->
    <arg if="$(eval arg('fake_execution') and arg('gripper_controller'))" name="controllers_file" value="$(find uf_robot_moveit_config)/config/$(arg robot_name)/fake_controllers_with_gripper.yaml"/>
    <arg if="$(eval arg('fake_execution') and not arg('gripper_controller'))" name="controllers_file" value="$(find uf_robot_moveit_config)/config/$(arg robot_name)/fake_controllers.yaml"/>
    <!-- gazebo -->
    <arg if="$(eval not arg('fake_execution') and arg('sim_gazebo') and arg('gripper_action') and arg('gripper_controller'))" name="controllers_file" value="$(find uf_robot_moveit_config)/config/$(arg robot_name)/gazebo_controllers_with_gripper_action.yaml"/>
    <arg if="$(eval not arg('fake_execution') and arg('sim_gazebo') and not arg('gripper_action') and arg('gripper_controller'))" name="controllers_file" value="$(find uf_robot_moveit_config)/config/$(arg robot_name)/gazebo_controllers_with_gripper.yaml"/>
    <arg if="$(eval not arg('fake_execution') and arg('sim_gazebo') and not arg('gripper_controller'))" name="controllers_file" value="$(find uf_robot_moveit_config)/config/$(arg robot_name)/controllers.yaml"/>
    <!-- real -->
    <arg if="$(eval not arg('fake_execution') and not arg('sim_gazebo') and arg('gripper_controller'))" name="controllers_file" value="$(find uf_robot_moveit_config)/config/$(arg robot_name)/controllers_with_gripper.yaml"/>
    <arg if="$(eval not arg('fake_execution') and not arg('sim_gazebo') and not arg('gripper_controller'))" name="controllers_file" value="$(find uf_robot_moveit_config)/config/$(arg robot_name)/controllers.yaml"/>

  </include>

  <!-- Sensors Functionality -->
  <include ns="move_group" file="$(find uf_robot_moveit_config)/launch/__sensor_manager.launch.xml" if="$(arg allow_trajectory_execution)">
    <arg name="moveit_sensor_manager" value="robot" />
    <arg name="sensors_3d" value="$(arg sensors_3d)" />
  </include>

  <!-- Start the actual move_group node/action server -->
  <node name="move_group" launch-prefix="$(arg launch_prefix)" pkg="moveit_ros_move_group" type="move_group" respawn="false" output="screen" args="$(arg command_args)">
    <!-- Set the display variable, in case OpenGL code is used internally -->
    <env name="DISPLAY" value="$(optenv DISPLAY :0)" />

    <param name="allow_trajectory_execution" value="$(arg allow_trajectory_execution)"/>
    <param name="max_safe_path_cost" value="$(arg max_safe_path_cost)"/>
    <param name="jiggle_fraction" value="$(arg jiggle_fraction)" />

    <!-- MoveGroup capabilities to load -->
    <param name="capabilities" value="move_group/MoveGroupCartesianPathService
              move_group/MoveGroupExecuteTrajectoryAction
              move_group/MoveGroupKinematicsService
              move_group/MoveGroupMoveAction
              move_group/MoveGroupPickPlaceAction
              move_group/MoveGroupPlanService
              move_group/MoveGroupQueryPlannersService
              move_group/MoveGroupStateValidationService
              move_group/MoveGroupGetPlanningSceneService
              move_group/ClearOctomapService
              " />

    <!-- inhibit these default MoveGroup capabilities -->
    <!--
    <param name="disable_capabilities" value="
                  move_group/MoveGroupKinematicsService
                  move_group/ClearOctomapService
                  " />
    -->

    <!-- Publish the planning scene of the physical robot so that rviz plugin can know actual robot -->
    <param name="planning_scene_monitor/publish_planning_scene" value="$(arg publish_monitored_planning_scene)" />
    <param name="planning_scene_monitor/publish_geometry_updates" value="$(arg publish_monitored_planning_scene)" />
    <param name="planning_scene_monitor/publish_state_updates" value="$(arg publish_monitored_planning_scene)" />
    <param name="planning_scene_monitor/publish_transforms_updates" value="$(arg publish_monitored_planning_scene)" />
  </node>

</launch>
